import sqlite3
import os

class UniversityDB:
    def __init__(self, db_name="university.db"):
        """Инициализация класса и подключение к базе данных."""
        self.db_name = db_name
        self.connection = sqlite3.connect(self.db_name)
        self.cursor = self.connection.cursor()
        self._create_tables()

    def _create_tables(self):
        """Создание таблиц, если они не существуют."""
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Students (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                name TEXT NOT NULL,
                                surname TEXT NOT NULL,
                                age INTEGER,
                                city TEXT
                              )''')

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Courses (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                name TEXT NOT NULL,
                                time_start TEXT,
                                time_end TEXT
                              )''')

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Student_courses (
                                student_id INTEGER,
                                course_id INTEGER,
                                FOREIGN KEY(student_id) REFERENCES Students(id),
                                FOREIGN KEY(course_id) REFERENCES Courses(id)
                              )''')
        self.connection.commit()

    def _table_is_empty(self, table_name):
        """Проверяет, пуста ли таблица."""
        self.cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        return self.cursor.fetchone()[0] == 0

    def populate_tables(self):
        """Добавляет данные в таблицы, если они пусты."""
        if self._table_is_empty("Courses"):
            self.cursor.execute("INSERT INTO Courses (id, name, time_start, time_end) VALUES (1, 'python', '21.07.21', '21.08.21')")
            self.cursor.execute("INSERT INTO Courses (id, name, time_start, time_end) VALUES (2, 'java', '13.07.21', '16.08.21')")
        
        if self._table_is_empty("Students"):
            self.cursor.execute("INSERT INTO Students (id, name, surname, age, city) VALUES (1, 'Max', 'Brooks', 24, 'Spb')")
            self.cursor.execute("INSERT INTO Students (id, name, surname, age, city) VALUES (2, 'John', 'Stones', 15, 'Spb')")
            self.cursor.execute("INSERT INTO Students (id, name, surname, age, city) VALUES (3, 'Andy', 'Wings', 45, 'Manhester')")
            self.cursor.execute("INSERT INTO Students (id, name, surname, age, city) VALUES (4, 'Kate', 'Brooks', 34, 'Spb')")

        if self._table_is_empty("Student_courses"):
            self.cursor.execute("INSERT INTO Student_courses (student_id, course_id) VALUES (1, 1)")
            self.cursor.execute("INSERT INTO Student_courses (student_id, course_id) VALUES (2, 1)")
            self.cursor.execute("INSERT INTO Student_courses (student_id, course_id) VALUES (3, 1)")
            self.cursor.execute("INSERT INTO Student_courses (student_id, course_id) VALUES (4, 2)")

        self.connection.commit()

    def execute_query(self, query, parameters=()):
        """Выполняет произвольный SQL-запрос."""
        self.cursor.execute(query, parameters)
        return self.cursor.fetchall()

    def get_students_over_30(self):
        """Получает всех студентов старше 30 лет."""
        query = "SELECT * FROM Students WHERE age > 30"
        return self.execute_query(query)

    def get_students_in_python_course(self):
        """Получает всех студентов, проходящих курс Python."""
        query = '''SELECT Students.* 
                   FROM Students
                   JOIN Student_courses ON Students.id = Student_courses.student_id
                   JOIN Courses ON Courses.id = Student_courses.course_id
                   WHERE Courses.name = 'python' '''
        return self.execute_query(query)

    def get_students_in_python_course_from_spb(self):
        """Получает всех студентов из Санкт-Петербурга, проходящих курс Python."""
        query = '''SELECT Students.* 
                   FROM Students
                   JOIN Student_courses ON Students.id = Student_courses.student_id
                   JOIN Courses ON Courses.id = Student_courses.course_id
                   WHERE Courses.name = 'python' AND Students.city = 'Spb' '''
        return self.execute_query(query)

    def close(self):
        """Закрывает соединение с базой данных."""
        self.connection.close()


# Тестирование функционала
if __name__ == "__main__":
    # Создаем объект класса
    db = UniversityDB()

    # Заполняем таблицы только если они пустые
    db.populate_tables()

    # Получить всех студентов старше 30 лет
    print("Студенты старше 30 лет:")
    for student in db.get_students_over_30():
        print(student)

    # Получить всех студентов, которые проходят курс по python
    print("\nСтуденты, проходящие курс по python:")
    for student in db.get_students_in_python_course():
        print(student)

    # Получить всех студентов, которые проходят курс по python и из Spb
    print("\nСтуденты, проходящие курс по python и из Spb:")
    for student in db.get_students_in_python_course_from_spb():
        print(student)

    # Закрываем соединение
    db.close()
